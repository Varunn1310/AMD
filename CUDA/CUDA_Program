%%cu
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>
#include <cuda.h>
#include <cuda_runtime.h>

#define N 10
#define MAX_ERR 1e-6

__global__ void vector_modulo(int *out, int *a, int num, int n) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
   
    if (tid < n){
        out[tid] = a[tid] % num;
    }
}

int main() {
    int *a, *out;
    int *d_a, *d_out; 

    // Allocate host memory
    a   = (int*)malloc(sizeof(int) * N);
    out = (int*)malloc(sizeof(int) * N);

    // Initialize host arrays
    for(int i = 0; i < N; i++) {
        a[i] = 2;
    }

    // Allocate device memory 
    cudaMalloc((void**)&d_a, sizeof(int) * N);
    cudaMalloc((void**)&d_out, sizeof(int) * N);

    // Transfer data from host to device memory
    cudaMemcpy(d_a, a, sizeof(int) * N, cudaMemcpyHostToDevice);

    // Executing kernel
    //Creating thread block of size 100 
    int block_size = 100;
    int grid_size = ((N + block_size) / block_size);
    vector_modulo<<<grid_size,block_size>>>(d_out, d_a, 5, N);
    // Transfer data back to host memory
    cudaMemcpy(out, d_out, sizeof(int) * N, cudaMemcpyDeviceToHost);

    printf("Printing output array\n\n");
    for(int i = 0; i<N; i++) {
        printf("%d\n",out[i]);
    }

    // Deallocate device memory
    cudaFree(d_a);
    cudaFree(d_out);

    // Deallocate host memory
    free(a);
    free(out);
}
